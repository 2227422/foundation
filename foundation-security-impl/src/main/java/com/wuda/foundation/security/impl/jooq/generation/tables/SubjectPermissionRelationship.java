/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.security.impl.jooq.generation.tables;


import com.wuda.foundation.security.impl.jooq.generation.FoundationSecurity;
import com.wuda.foundation.security.impl.jooq.generation.Indexes;
import com.wuda.foundation.security.impl.jooq.generation.Keys;
import com.wuda.foundation.security.impl.jooq.generation.tables.records.SubjectPermissionRelationshipRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * subject可以代表用户，也可以代表想要访问其他资源的应用，suibject与permission的关联关系表。比如我们可以说user 【IS 
 * A】 subject
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectPermissionRelationship extends TableImpl<SubjectPermissionRelationshipRecord> {

    private static final long serialVersionUID = -461321669;

    /**
     * The reference instance of <code>foundation_security.subject_permission_relationship</code>
     */
    public static final SubjectPermissionRelationship SUBJECT_PERMISSION_RELATIONSHIP = new SubjectPermissionRelationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectPermissionRelationshipRecord> getRecordType() {
        return SubjectPermissionRelationshipRecord.class;
    }

    /**
     * The column <code>foundation_security.subject_permission_relationship.id</code>.
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_security.subject_permission_relationship.subject_type</code>. subject的类型，比如subject代表用户
     */
    public final TableField<SubjectPermissionRelationshipRecord, UByte> SUBJECT_TYPE = createField(DSL.name("subject_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "subject的类型，比如subject代表用户");

    /**
     * The column <code>foundation_security.subject_permission_relationship.subject_identifier</code>. 如果subject type代表用户，那么这个值可能就是用户ID
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> SUBJECT_IDENTIFIER = createField(DSL.name("subject_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "如果subject type代表用户，那么这个值可能就是用户ID");

    /**
     * The column <code>foundation_security.subject_permission_relationship.persission_target_id</code>.
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> PERSISSION_TARGET_ID = createField(DSL.name("persission_target_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.subject_permission_relationship.permission_action_id</code>. permission action id，如果为0，则表示没有分配action
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> PERMISSION_ACTION_ID = createField(DSL.name("permission_action_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "permission action id，如果为0，则表示没有分配action");

    /**
     * The column <code>foundation_security.subject_permission_relationship.command</code>. 可选值有grant，revoke
     */
    public final TableField<SubjectPermissionRelationshipRecord, String> COMMAND = createField(DSL.name("command"), org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false), this, "可选值有grant，revoke");

    /**
     * The column <code>foundation_security.subject_permission_relationship.create_time</code>.
     */
    public final TableField<SubjectPermissionRelationshipRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_security.subject_permission_relationship.create_user_id</code>.
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.subject_permission_relationship.is_deleted</code>.
     */
    public final TableField<SubjectPermissionRelationshipRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_security.subject_permission_relationship</code> table reference
     */
    public SubjectPermissionRelationship() {
        this(DSL.name("subject_permission_relationship"), null);
    }

    /**
     * Create an aliased <code>foundation_security.subject_permission_relationship</code> table reference
     */
    public SubjectPermissionRelationship(String alias) {
        this(DSL.name(alias), SUBJECT_PERMISSION_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>foundation_security.subject_permission_relationship</code> table reference
     */
    public SubjectPermissionRelationship(Name alias) {
        this(alias, SUBJECT_PERMISSION_RELATIONSHIP);
    }

    private SubjectPermissionRelationship(Name alias, Table<SubjectPermissionRelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubjectPermissionRelationship(Name alias, Table<SubjectPermissionRelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("subject可以代表用户，也可以代表想要访问其他资源的应用，suibject与permission的关联关系表。比如我们可以说user 【IS A】 subject"), TableOptions.table());
    }

    public <O extends Record> SubjectPermissionRelationship(Table<O> child, ForeignKey<O, SubjectPermissionRelationshipRecord> key) {
        super(child, key, SUBJECT_PERMISSION_RELATIONSHIP);
    }

    @Override
    public Schema getSchema() {
        return FoundationSecurity.FOUNDATION_SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUBJECT_PERMISSION_RELATIONSHIP_FK_PERMISSION_ACTION_ID, Indexes.SUBJECT_PERMISSION_RELATIONSHIP_FK_PERMISSION_TARGET_ID, Indexes.SUBJECT_PERMISSION_RELATIONSHIP_IDX_SUBJECT);
    }

    @Override
    public Identity<SubjectPermissionRelationshipRecord, ULong> getIdentity() {
        return Keys.IDENTITY_SUBJECT_PERMISSION_RELATIONSHIP;
    }

    @Override
    public UniqueKey<SubjectPermissionRelationshipRecord> getPrimaryKey() {
        return Keys.KEY_SUBJECT_PERMISSION_RELATIONSHIP_PRIMARY;
    }

    @Override
    public List<UniqueKey<SubjectPermissionRelationshipRecord>> getKeys() {
        return Arrays.<UniqueKey<SubjectPermissionRelationshipRecord>>asList(Keys.KEY_SUBJECT_PERMISSION_RELATIONSHIP_PRIMARY);
    }

    @Override
    public SubjectPermissionRelationship as(String alias) {
        return new SubjectPermissionRelationship(DSL.name(alias), this);
    }

    @Override
    public SubjectPermissionRelationship as(Name alias) {
        return new SubjectPermissionRelationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectPermissionRelationship rename(String name) {
        return new SubjectPermissionRelationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectPermissionRelationship rename(Name name) {
        return new SubjectPermissionRelationship(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, UByte, ULong, ULong, ULong, String, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
