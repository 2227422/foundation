/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.notification.impl.jooq.generation.tables.records;


import com.wuda.foundation.notification.impl.jooq.generation.tables.NotificationDefinitionContent;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * 定义通知的内容。【一个很重要的规则是】同一个定义，可以反复发送通知（比如，你是一个系统管理员，当主机cpu超过50%的时候，就发送通知给你，这个时候，你可以声明一个通知定义，然后只要主机cpu超过50，就通过这个定义发送消息给你，这种场景下，通知定义是一次性的，但是通过这个定义，会发送无数条通知），因此，每当使用这个定义发送通知时，就可以为这个定义声明发送的内容。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationDefinitionContentRecord extends UpdatableRecordImpl<NotificationDefinitionContentRecord> implements Record10<ULong, ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> {

    private static final long serialVersionUID = 374027971;

    /**
     * Setter for <code>foundation_notification.notification_definition_content.notification_definition_content_id</code>.
     */
    public void setNotificationDefinitionContentId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.notification_definition_content_id</code>.
     */
    public ULong getNotificationDefinitionContentId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.notification_definitionf_id</code>.
     */
    public void setNotificationDefinitionfId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.notification_definitionf_id</code>.
     */
    public ULong getNotificationDefinitionfId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.notification_definition_send_method_id</code>. 表示这个内容由哪种方式发送，比如使用短信发送。这样做的一个好处是，每种发布方式都可以定义自己的内容，即短信可以发送适合短信息的内容，邮件可以发送丰富的邮件内容。
     */
    public void setNotificationDefinitionSendMethodId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.notification_definition_send_method_id</code>. 表示这个内容由哪种方式发送，比如使用短信发送。这样做的一个好处是，每种发布方式都可以定义自己的内容，即短信可以发送适合短信息的内容，邮件可以发送丰富的邮件内容。
     */
    public ULong getNotificationDefinitionSendMethodId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.title</code>. 声明通知的标题
     */
    public void setTitle(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.title</code>. 声明通知的标题
     */
    public String getTitle() {
        return (String) get(3);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.template_parameter</code>. 模板参数，使用模板后生成具体的通知内容。为什么要使用模板参数，而不直接使用通知内容呢？因为在有些场景下，会先定义通知模板，比如像短信，短信服务商（比如阿里云的短信发送服务），就是先定义模板；而有些场景可能是直接写好标题和内容，就直接发送了，为了兼容这两种情况，在数据库定义时就使用模板的方式，因为通过模板和模板参数就可以生成消息内容，对于那些不使用模板的通知，我们只需要内置一个模板，固定下来参数的名称，然后把通知内容保存时，使用这个参数作为key，通知内容作为value，就可以生成数据库需要的模板参数了，请查看notification_template中内置的模板。
     */
    public void setTemplateParameter(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.template_parameter</code>. 模板参数，使用模板后生成具体的通知内容。为什么要使用模板参数，而不直接使用通知内容呢？因为在有些场景下，会先定义通知模板，比如像短信，短信服务商（比如阿里云的短信发送服务），就是先定义模板；而有些场景可能是直接写好标题和内容，就直接发送了，为了兼容这两种情况，在数据库定义时就使用模板的方式，因为通过模板和模板参数就可以生成消息内容，对于那些不使用模板的通知，我们只需要内置一个模板，固定下来参数的名称，然后把通知内容保存时，使用这个参数作为key，通知内容作为value，就可以生成数据库需要的模板参数了，请查看notification_template中内置的模板。
     */
    public String getTemplateParameter() {
        return (String) get(4);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.create_user_id</code>.
     */
    public void setCreateUserId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.create_user_id</code>.
     */
    public ULong getCreateUserId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.last_modify_time</code>.
     */
    public void setLastModifyTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.last_modify_time</code>.
     */
    public LocalDateTime getLastModifyTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.last_modify_user_id</code>.
     */
    public void setLastModifyUserId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.last_modify_user_id</code>.
     */
    public ULong getLastModifyUserId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>foundation_notification.notification_definition_content.is_deleted</code>.
     */
    public void setIsDeleted(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_definition_content.is_deleted</code>.
     */
    public ULong getIsDeleted() {
        return (ULong) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.NOTIFICATION_DEFINITION_CONTENT_ID;
    }

    @Override
    public Field<ULong> field2() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.NOTIFICATION_DEFINITIONF_ID;
    }

    @Override
    public Field<ULong> field3() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.NOTIFICATION_DEFINITION_SEND_METHOD_ID;
    }

    @Override
    public Field<String> field4() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.TITLE;
    }

    @Override
    public Field<String> field5() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.TEMPLATE_PARAMETER;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.CREATE_TIME;
    }

    @Override
    public Field<ULong> field7() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.CREATE_USER_ID;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.LAST_MODIFY_TIME;
    }

    @Override
    public Field<ULong> field9() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.LAST_MODIFY_USER_ID;
    }

    @Override
    public Field<ULong> field10() {
        return NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT.IS_DELETED;
    }

    @Override
    public ULong component1() {
        return getNotificationDefinitionContentId();
    }

    @Override
    public ULong component2() {
        return getNotificationDefinitionfId();
    }

    @Override
    public ULong component3() {
        return getNotificationDefinitionSendMethodId();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public String component5() {
        return getTemplateParameter();
    }

    @Override
    public LocalDateTime component6() {
        return getCreateTime();
    }

    @Override
    public ULong component7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime component8() {
        return getLastModifyTime();
    }

    @Override
    public ULong component9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong component10() {
        return getIsDeleted();
    }

    @Override
    public ULong value1() {
        return getNotificationDefinitionContentId();
    }

    @Override
    public ULong value2() {
        return getNotificationDefinitionfId();
    }

    @Override
    public ULong value3() {
        return getNotificationDefinitionSendMethodId();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public String value5() {
        return getTemplateParameter();
    }

    @Override
    public LocalDateTime value6() {
        return getCreateTime();
    }

    @Override
    public ULong value7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime value8() {
        return getLastModifyTime();
    }

    @Override
    public ULong value9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong value10() {
        return getIsDeleted();
    }

    @Override
    public NotificationDefinitionContentRecord value1(ULong value) {
        setNotificationDefinitionContentId(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value2(ULong value) {
        setNotificationDefinitionfId(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value3(ULong value) {
        setNotificationDefinitionSendMethodId(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value5(String value) {
        setTemplateParameter(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value6(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value7(ULong value) {
        setCreateUserId(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value8(LocalDateTime value) {
        setLastModifyTime(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value9(ULong value) {
        setLastModifyUserId(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord value10(ULong value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public NotificationDefinitionContentRecord values(ULong value1, ULong value2, ULong value3, String value4, String value5, LocalDateTime value6, ULong value7, LocalDateTime value8, ULong value9, ULong value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationDefinitionContentRecord
     */
    public NotificationDefinitionContentRecord() {
        super(NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT);
    }

    /**
     * Create a detached, initialised NotificationDefinitionContentRecord
     */
    public NotificationDefinitionContentRecord(ULong notificationDefinitionContentId, ULong notificationDefinitionfId, ULong notificationDefinitionSendMethodId, String title, String templateParameter, LocalDateTime createTime, ULong createUserId, LocalDateTime lastModifyTime, ULong lastModifyUserId, ULong isDeleted) {
        super(NotificationDefinitionContent.NOTIFICATION_DEFINITION_CONTENT);

        set(0, notificationDefinitionContentId);
        set(1, notificationDefinitionfId);
        set(2, notificationDefinitionSendMethodId);
        set(3, title);
        set(4, templateParameter);
        set(5, createTime);
        set(6, createUserId);
        set(7, lastModifyTime);
        set(8, lastModifyUserId);
        set(9, isDeleted);
    }
}
