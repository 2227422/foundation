/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.notification.impl.jooq.generation.tables;


import com.wuda.foundation.notification.impl.jooq.generation.FoundationNotification;
import com.wuda.foundation.notification.impl.jooq.generation.Indexes;
import com.wuda.foundation.notification.impl.jooq.generation.Keys;
import com.wuda.foundation.notification.impl.jooq.generation.tables.records.NotificationDefinitionObserverRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 定义通知的观察者，用于接收或者查看通知
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationDefinitionObserver extends TableImpl<NotificationDefinitionObserverRecord> {

    private static final long serialVersionUID = -767616000;

    /**
     * The reference instance of <code>foundation_notification.notification_definition_observer</code>
     */
    public static final NotificationDefinitionObserver NOTIFICATION_DEFINITION_OBSERVER = new NotificationDefinitionObserver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationDefinitionObserverRecord> getRecordType() {
        return NotificationDefinitionObserverRecord.class;
    }

    /**
     * The column <code>foundation_notification.notification_definition_observer.notification_definition_observer_id</code>. 表的主键
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> NOTIFICATION_DEFINITION_OBSERVER_ID = createField(DSL.name("notification_definition_observer_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "表的主键");

    /**
     * The column <code>foundation_notification.notification_definition_observer.notification_definition_id</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> NOTIFICATION_DEFINITION_ID = createField(DSL.name("notification_definition_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_observer.notification_definition_send_method_id</code>. 表示这个接收者接收哪种方式的通知，比如接收短信的通知。这样做的一个好处是，每种发布方式都可以定义自己的接收者，即短信可以选择一批人，邮件可以选择宁外的一批人，站内信也可以选择一批人接收，等等。
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> NOTIFICATION_DEFINITION_SEND_METHOD_ID = createField(DSL.name("notification_definition_send_method_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "表示这个接收者接收哪种方式的通知，比如接收短信的通知。这样做的一个好处是，每种发布方式都可以定义自己的接收者，即短信可以选择一批人，邮件可以选择宁外的一批人，站内信也可以选择一批人接收，等等。");

    /**
     * The column <code>foundation_notification.notification_definition_observer.observer_type</code>. 接收者类型
     */
    public final TableField<NotificationDefinitionObserverRecord, UByte> OBSERVER_TYPE = createField(DSL.name("observer_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "接收者类型");

    /**
     * The column <code>foundation_notification.notification_definition_observer.observer_identifier</code>. 接收者唯一标记
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> OBSERVER_IDENTIFIER = createField(DSL.name("observer_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "接收者唯一标记");

    /**
     * The column <code>foundation_notification.notification_definition_observer.create_time</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_observer.create_user_id</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_observer.last_modify_time</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_observer.last_modify_user_id</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_observer.is_deleted</code>.
     */
    public final TableField<NotificationDefinitionObserverRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_notification.notification_definition_observer</code> table reference
     */
    public NotificationDefinitionObserver() {
        this(DSL.name("notification_definition_observer"), null);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_observer</code> table reference
     */
    public NotificationDefinitionObserver(String alias) {
        this(DSL.name(alias), NOTIFICATION_DEFINITION_OBSERVER);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_observer</code> table reference
     */
    public NotificationDefinitionObserver(Name alias) {
        this(alias, NOTIFICATION_DEFINITION_OBSERVER);
    }

    private NotificationDefinitionObserver(Name alias, Table<NotificationDefinitionObserverRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationDefinitionObserver(Name alias, Table<NotificationDefinitionObserverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("定义通知的观察者，用于接收或者查看通知"), TableOptions.table());
    }

    public <O extends Record> NotificationDefinitionObserver(Table<O> child, ForeignKey<O, NotificationDefinitionObserverRecord> key) {
        super(child, key, NOTIFICATION_DEFINITION_OBSERVER);
    }

    @Override
    public Schema getSchema() {
        return FoundationNotification.FOUNDATION_NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_DEFINITION_OBSERVER_IDX_NOTIFICATION_DEFINITION_ID, Indexes.NOTIFICATION_DEFINITION_OBSERVER_IDX_NOTIFICATION_DEFINITION_SEND_METHOD_ID);
    }

    @Override
    public Identity<NotificationDefinitionObserverRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION_DEFINITION_OBSERVER;
    }

    @Override
    public UniqueKey<NotificationDefinitionObserverRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_DEFINITION_OBSERVER_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationDefinitionObserverRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationDefinitionObserverRecord>>asList(Keys.KEY_NOTIFICATION_DEFINITION_OBSERVER_PRIMARY);
    }

    @Override
    public NotificationDefinitionObserver as(String alias) {
        return new NotificationDefinitionObserver(DSL.name(alias), this);
    }

    @Override
    public NotificationDefinitionObserver as(Name alias) {
        return new NotificationDefinitionObserver(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionObserver rename(String name) {
        return new NotificationDefinitionObserver(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionObserver rename(Name name) {
        return new NotificationDefinitionObserver(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, UByte, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
