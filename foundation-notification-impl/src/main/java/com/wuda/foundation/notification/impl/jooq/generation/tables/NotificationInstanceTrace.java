/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.notification.impl.jooq.generation.tables;


import com.wuda.foundation.notification.impl.jooq.generation.FoundationNotification;
import com.wuda.foundation.notification.impl.jooq.generation.Indexes;
import com.wuda.foundation.notification.impl.jooq.generation.Keys;
import com.wuda.foundation.notification.impl.jooq.generation.tables.records.NotificationInstanceTraceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 通知的追踪信息，比如是否被接收者阅读
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationInstanceTrace extends TableImpl<NotificationInstanceTraceRecord> {

    private static final long serialVersionUID = 1557107403;

    /**
     * The reference instance of <code>foundation_notification.notification_instance_trace</code>
     */
    public static final NotificationInstanceTrace NOTIFICATION_INSTANCE_TRACE = new NotificationInstanceTrace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationInstanceTraceRecord> getRecordType() {
        return NotificationInstanceTraceRecord.class;
    }

    /**
     * The column <code>foundation_notification.notification_instance_trace.notification_instance_trace_id</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, ULong> NOTIFICATION_INSTANCE_TRACE_ID = createField(DSL.name("notification_instance_trace_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.notification_instance_content_id</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, ULong> NOTIFICATION_INSTANCE_CONTENT_ID = createField(DSL.name("notification_instance_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.observer_type</code>. 查看者类型
     */
    public final TableField<NotificationInstanceTraceRecord, UByte> OBSERVER_TYPE = createField(DSL.name("observer_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "查看者类型");

    /**
     * The column <code>foundation_notification.notification_instance_trace.observer_identifier</code>. 查看者唯一标记
     */
    public final TableField<NotificationInstanceTraceRecord, ULong> OBSERVER_IDENTIFIER = createField(DSL.name("observer_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "查看者唯一标记");

    /**
     * The column <code>foundation_notification.notification_instance_trace.read</code>. 是否已读
     */
    public final TableField<NotificationInstanceTraceRecord, Boolean> READ = createField(DSL.name("read"), org.jooq.impl.SQLDataType.BIT.nullable(false), this, "是否已读");

    /**
     * The column <code>foundation_notification.notification_instance_trace.read_time</code>. 阅读该通知的时间
     */
    public final TableField<NotificationInstanceTraceRecord, LocalDateTime> READ_TIME = createField(DSL.name("read_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "阅读该通知的时间");

    /**
     * The column <code>foundation_notification.notification_instance_trace.create_time</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.create_user_id</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.last_modify_time</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.last_modify_user_id</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, Long> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_trace.is_deleted</code>.
     */
    public final TableField<NotificationInstanceTraceRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_notification.notification_instance_trace</code> table reference
     */
    public NotificationInstanceTrace() {
        this(DSL.name("notification_instance_trace"), null);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_instance_trace</code> table reference
     */
    public NotificationInstanceTrace(String alias) {
        this(DSL.name(alias), NOTIFICATION_INSTANCE_TRACE);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_instance_trace</code> table reference
     */
    public NotificationInstanceTrace(Name alias) {
        this(alias, NOTIFICATION_INSTANCE_TRACE);
    }

    private NotificationInstanceTrace(Name alias, Table<NotificationInstanceTraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationInstanceTrace(Name alias, Table<NotificationInstanceTraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("通知的追踪信息，比如是否被接收者阅读"), TableOptions.table());
    }

    public <O extends Record> NotificationInstanceTrace(Table<O> child, ForeignKey<O, NotificationInstanceTraceRecord> key) {
        super(child, key, NOTIFICATION_INSTANCE_TRACE);
    }

    @Override
    public Schema getSchema() {
        return FoundationNotification.FOUNDATION_NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_INSTANCE_TRACE_IDX_NOTIFICATION_ID);
    }

    @Override
    public Identity<NotificationInstanceTraceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION_INSTANCE_TRACE;
    }

    @Override
    public UniqueKey<NotificationInstanceTraceRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_INSTANCE_TRACE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationInstanceTraceRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationInstanceTraceRecord>>asList(Keys.KEY_NOTIFICATION_INSTANCE_TRACE_PRIMARY);
    }

    @Override
    public NotificationInstanceTrace as(String alias) {
        return new NotificationInstanceTrace(DSL.name(alias), this);
    }

    @Override
    public NotificationInstanceTrace as(Name alias) {
        return new NotificationInstanceTrace(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInstanceTrace rename(String name) {
        return new NotificationInstanceTrace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInstanceTrace rename(Name name) {
        return new NotificationInstanceTrace(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, UByte, ULong, Boolean, LocalDateTime, LocalDateTime, ULong, LocalDateTime, Long, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
