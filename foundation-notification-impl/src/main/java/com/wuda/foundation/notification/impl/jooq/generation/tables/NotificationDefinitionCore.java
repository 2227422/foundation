/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.notification.impl.jooq.generation.tables;


import com.wuda.foundation.notification.impl.jooq.generation.FoundationNotification;
import com.wuda.foundation.notification.impl.jooq.generation.Indexes;
import com.wuda.foundation.notification.impl.jooq.generation.Keys;
import com.wuda.foundation.notification.impl.jooq.generation.tables.records.NotificationDefinitionCoreRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 用于定义通知。这个就好像是Java中的Class，实例（Object）通过Class生成；同样的，我们先定义通知的内容，发送方式，使用的模板，接收人等等信息，然后根据定义产生具体的通知。。表中的每条记录都好像Java中定义的一个Class一样。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationDefinitionCore extends TableImpl<NotificationDefinitionCoreRecord> {

    private static final long serialVersionUID = 627875350;

    /**
     * The reference instance of <code>foundation_notification.notification_definition_core</code>
     */
    public static final NotificationDefinitionCore NOTIFICATION_DEFINITION_CORE = new NotificationDefinitionCore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationDefinitionCoreRecord> getRecordType() {
        return NotificationDefinitionCoreRecord.class;
    }

    /**
     * The column <code>foundation_notification.notification_definition_core.notification_difinition_core_id</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, ULong> NOTIFICATION_DIFINITION_CORE_ID = createField(DSL.name("notification_difinition_core_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.notification_definition_id</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, ULong> NOTIFICATION_DEFINITION_ID = createField(DSL.name("notification_definition_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.name</code>. 该定义本身的名称，就好像Java语言中定义一个Class，要给这个Class命名
     */
    public final TableField<NotificationDefinitionCoreRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "该定义本身的名称，就好像Java语言中定义一个Class，要给这个Class命名");

    /**
     * The column <code>foundation_notification.notification_definition_core.description</code>. 对于该定义的描述
     */
    public final TableField<NotificationDefinitionCoreRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "对于该定义的描述");

    /**
     * The column <code>foundation_notification.notification_definition_core.create_time</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.create_user_id</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.last_modify_time</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.last_modify_user_id</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_core.is_deleted</code>.
     */
    public final TableField<NotificationDefinitionCoreRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_notification.notification_definition_core</code> table reference
     */
    public NotificationDefinitionCore() {
        this(DSL.name("notification_definition_core"), null);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_core</code> table reference
     */
    public NotificationDefinitionCore(String alias) {
        this(DSL.name(alias), NOTIFICATION_DEFINITION_CORE);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_core</code> table reference
     */
    public NotificationDefinitionCore(Name alias) {
        this(alias, NOTIFICATION_DEFINITION_CORE);
    }

    private NotificationDefinitionCore(Name alias, Table<NotificationDefinitionCoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationDefinitionCore(Name alias, Table<NotificationDefinitionCoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用于定义通知。这个就好像是Java中的Class，实例（Object）通过Class生成；同样的，我们先定义通知的内容，发送方式，使用的模板，接收人等等信息，然后根据定义产生具体的通知。。表中的每条记录都好像Java中定义的一个Class一样。"), TableOptions.table());
    }

    public <O extends Record> NotificationDefinitionCore(Table<O> child, ForeignKey<O, NotificationDefinitionCoreRecord> key) {
        super(child, key, NOTIFICATION_DEFINITION_CORE);
    }

    @Override
    public Schema getSchema() {
        return FoundationNotification.FOUNDATION_NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_DEFINITION_CORE_IDX_NOTIFICATION_DEFINITION_ID);
    }

    @Override
    public Identity<NotificationDefinitionCoreRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION_DEFINITION_CORE;
    }

    @Override
    public UniqueKey<NotificationDefinitionCoreRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_DEFINITION_CORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationDefinitionCoreRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationDefinitionCoreRecord>>asList(Keys.KEY_NOTIFICATION_DEFINITION_CORE_PRIMARY);
    }

    @Override
    public NotificationDefinitionCore as(String alias) {
        return new NotificationDefinitionCore(DSL.name(alias), this);
    }

    @Override
    public NotificationDefinitionCore as(Name alias) {
        return new NotificationDefinitionCore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionCore rename(String name) {
        return new NotificationDefinitionCore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionCore rename(Name name) {
        return new NotificationDefinitionCore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
