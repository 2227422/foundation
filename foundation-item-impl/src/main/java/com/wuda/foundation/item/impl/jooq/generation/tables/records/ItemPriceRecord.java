/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.item.impl.jooq.generation.tables.records;


import com.wuda.foundation.item.impl.jooq.generation.tables.ItemPrice;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * 物品级别的价格，在价格体系中处于最低级别，当其他价格都没有设置的，取该价格。比如：当物品规格有自己的价格时，优先使用规格的价格。同时需要特别注意的是：同一个物品只能有一条记录，代表在没有任何业务的情况下，该物品使用的价格。随着业务的发展，该物品可能需要其他价格，这些价格必须保存到具体的业务相关的表中，也就是说该表不保存任何与业务相关的价格。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemPriceRecord extends UpdatableRecordImpl<ItemPriceRecord> implements Record10<ULong, ULong, ULong, UInteger, UInteger, LocalDateTime, ULong, LocalDateTime, ULong, ULong> {

    private static final long serialVersionUID = 1878745443;

    /**
     * Setter for <code>foundation_item.item_price.item_price_id</code>. 主键
     */
    public void setItemPriceId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.item_price_id</code>. 主键
     */
    public ULong getItemPriceId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>foundation_item.item_price.item_id</code>.
     */
    public void setItemId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.item_id</code>.
     */
    public ULong getItemId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>foundation_item.item_price.item_variation_id</code>.
     */
    public void setItemVariationId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.item_variation_id</code>.
     */
    public ULong getItemVariationId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>foundation_item.item_price.purchase_price</code>. 购买价格。单位是分。定义很明确，就是用户购买商品时，实实在在支付的金额。
价格种类可能很多，比如零售价，市场价等等，名词很多，但是这些价格不一定是用户最后
实际支付的价格，而且在实际业务中很容易出现【如果是这个业务就拿Ａ价格作为购买价格，
如果是那个业务又拿Ｂ价格作为购买价格】，是当我们认真思考会发现，不管怎么样，
用户最终总是有一个支付的金额，这个字段就是保存这个价格。其他业务可能会有自身业务相关的购买价格，
比如做活动时，通常叫活动价，但是换个思维，这个活动价也就是当前活动的购买价，
因此在相关表中保存价格时名称必须和这个字段一样，避免名称太多，造成混乱。
     */
    public void setPurchasePrice(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.purchase_price</code>. 购买价格。单位是分。定义很明确，就是用户购买商品时，实实在在支付的金额。
价格种类可能很多，比如零售价，市场价等等，名词很多，但是这些价格不一定是用户最后
实际支付的价格，而且在实际业务中很容易出现【如果是这个业务就拿Ａ价格作为购买价格，
如果是那个业务又拿Ｂ价格作为购买价格】，是当我们认真思考会发现，不管怎么样，
用户最终总是有一个支付的金额，这个字段就是保存这个价格。其他业务可能会有自身业务相关的购买价格，
比如做活动时，通常叫活动价，但是换个思维，这个活动价也就是当前活动的购买价，
因此在相关表中保存价格时名称必须和这个字段一样，避免名称太多，造成混乱。
     */
    public UInteger getPurchasePrice() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>foundation_item.item_price.line_throuth_price</code>. 划线价。单位是分。 定义很明确， 就是页面显示的那个划线后的价格， 价格种类可能很多，
比如零售价，市场价等等，名词很多，但是这些价格哪一个是用于划线的呢？ 如果不明确定义， 就会出现
【如果是这个业务就拿Ａ价格划线，如果是那个业务又拿Ｂ价格划线】，为了避免出现这些情况,在这里
统一定义，其他业务可能会有自身业务相关的划线价格，比如做活动时，用于划线的价格可能叫做‘原价’，
但是换个思维，这个'原价'也就是当前活动的划线价，因此在相关表中保存价格时名称必须和这个字段一样，
避免名称太多，造成混乱。line through，来自于CSS中的划线样式。
     */
    public void setLineThrouthPrice(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.line_throuth_price</code>. 划线价。单位是分。 定义很明确， 就是页面显示的那个划线后的价格， 价格种类可能很多，
比如零售价，市场价等等，名词很多，但是这些价格哪一个是用于划线的呢？ 如果不明确定义， 就会出现
【如果是这个业务就拿Ａ价格划线，如果是那个业务又拿Ｂ价格划线】，为了避免出现这些情况,在这里
统一定义，其他业务可能会有自身业务相关的划线价格，比如做活动时，用于划线的价格可能叫做‘原价’，
但是换个思维，这个'原价'也就是当前活动的划线价，因此在相关表中保存价格时名称必须和这个字段一样，
避免名称太多，造成混乱。line through，来自于CSS中的划线样式。
     */
    public UInteger getLineThrouthPrice() {
        return (UInteger) get(4);
    }

    /**
     * Setter for <code>foundation_item.item_price.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>foundation_item.item_price.create_user_id</code>.
     */
    public void setCreateUserId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.create_user_id</code>.
     */
    public ULong getCreateUserId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>foundation_item.item_price.last_modify_time</code>.
     */
    public void setLastModifyTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.last_modify_time</code>.
     */
    public LocalDateTime getLastModifyTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>foundation_item.item_price.last_modify_user_id</code>.
     */
    public void setLastModifyUserId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.last_modify_user_id</code>.
     */
    public ULong getLastModifyUserId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>foundation_item.item_price.is_deleted</code>.
     */
    public void setIsDeleted(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>foundation_item.item_price.is_deleted</code>.
     */
    public ULong getIsDeleted() {
        return (ULong) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, UInteger, UInteger, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, ULong, ULong, UInteger, UInteger, LocalDateTime, ULong, LocalDateTime, ULong, ULong> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return ItemPrice.ITEM_PRICE.ITEM_PRICE_ID;
    }

    @Override
    public Field<ULong> field2() {
        return ItemPrice.ITEM_PRICE.ITEM_ID;
    }

    @Override
    public Field<ULong> field3() {
        return ItemPrice.ITEM_PRICE.ITEM_VARIATION_ID;
    }

    @Override
    public Field<UInteger> field4() {
        return ItemPrice.ITEM_PRICE.PURCHASE_PRICE;
    }

    @Override
    public Field<UInteger> field5() {
        return ItemPrice.ITEM_PRICE.LINE_THROUTH_PRICE;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return ItemPrice.ITEM_PRICE.CREATE_TIME;
    }

    @Override
    public Field<ULong> field7() {
        return ItemPrice.ITEM_PRICE.CREATE_USER_ID;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return ItemPrice.ITEM_PRICE.LAST_MODIFY_TIME;
    }

    @Override
    public Field<ULong> field9() {
        return ItemPrice.ITEM_PRICE.LAST_MODIFY_USER_ID;
    }

    @Override
    public Field<ULong> field10() {
        return ItemPrice.ITEM_PRICE.IS_DELETED;
    }

    @Override
    public ULong component1() {
        return getItemPriceId();
    }

    @Override
    public ULong component2() {
        return getItemId();
    }

    @Override
    public ULong component3() {
        return getItemVariationId();
    }

    @Override
    public UInteger component4() {
        return getPurchasePrice();
    }

    @Override
    public UInteger component5() {
        return getLineThrouthPrice();
    }

    @Override
    public LocalDateTime component6() {
        return getCreateTime();
    }

    @Override
    public ULong component7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime component8() {
        return getLastModifyTime();
    }

    @Override
    public ULong component9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong component10() {
        return getIsDeleted();
    }

    @Override
    public ULong value1() {
        return getItemPriceId();
    }

    @Override
    public ULong value2() {
        return getItemId();
    }

    @Override
    public ULong value3() {
        return getItemVariationId();
    }

    @Override
    public UInteger value4() {
        return getPurchasePrice();
    }

    @Override
    public UInteger value5() {
        return getLineThrouthPrice();
    }

    @Override
    public LocalDateTime value6() {
        return getCreateTime();
    }

    @Override
    public ULong value7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime value8() {
        return getLastModifyTime();
    }

    @Override
    public ULong value9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong value10() {
        return getIsDeleted();
    }

    @Override
    public ItemPriceRecord value1(ULong value) {
        setItemPriceId(value);
        return this;
    }

    @Override
    public ItemPriceRecord value2(ULong value) {
        setItemId(value);
        return this;
    }

    @Override
    public ItemPriceRecord value3(ULong value) {
        setItemVariationId(value);
        return this;
    }

    @Override
    public ItemPriceRecord value4(UInteger value) {
        setPurchasePrice(value);
        return this;
    }

    @Override
    public ItemPriceRecord value5(UInteger value) {
        setLineThrouthPrice(value);
        return this;
    }

    @Override
    public ItemPriceRecord value6(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public ItemPriceRecord value7(ULong value) {
        setCreateUserId(value);
        return this;
    }

    @Override
    public ItemPriceRecord value8(LocalDateTime value) {
        setLastModifyTime(value);
        return this;
    }

    @Override
    public ItemPriceRecord value9(ULong value) {
        setLastModifyUserId(value);
        return this;
    }

    @Override
    public ItemPriceRecord value10(ULong value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public ItemPriceRecord values(ULong value1, ULong value2, ULong value3, UInteger value4, UInteger value5, LocalDateTime value6, ULong value7, LocalDateTime value8, ULong value9, ULong value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemPriceRecord
     */
    public ItemPriceRecord() {
        super(ItemPrice.ITEM_PRICE);
    }

    /**
     * Create a detached, initialised ItemPriceRecord
     */
    public ItemPriceRecord(ULong itemPriceId, ULong itemId, ULong itemVariationId, UInteger purchasePrice, UInteger lineThrouthPrice, LocalDateTime createTime, ULong createUserId, LocalDateTime lastModifyTime, ULong lastModifyUserId, ULong isDeleted) {
        super(ItemPrice.ITEM_PRICE);

        set(0, itemPriceId);
        set(1, itemId);
        set(2, itemVariationId);
        set(3, purchasePrice);
        set(4, lineThrouthPrice);
        set(5, createTime);
        set(6, createUserId);
        set(7, lastModifyTime);
        set(8, lastModifyUserId);
        set(9, isDeleted);
    }
}
