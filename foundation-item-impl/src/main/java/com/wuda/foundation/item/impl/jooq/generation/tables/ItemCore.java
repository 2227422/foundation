/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.item.impl.jooq.generation.tables;


import com.wuda.foundation.item.impl.jooq.generation.FoundationItem;
import com.wuda.foundation.item.impl.jooq.generation.Indexes;
import com.wuda.foundation.item.impl.jooq.generation.Keys;
import com.wuda.foundation.item.impl.jooq.generation.tables.records.ItemCoreRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 物品核心信息，代表所有的物品，之前有把用户ID放进来，表示该物品所属的用户，但是考虑到如果有子账号的情况，物品难道属于这个子账号所属的用户吗？而且记录了创建人用户ID，考虑这两个因素，因此不设置用户ID列
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemCore extends TableImpl<ItemCoreRecord> {

    private static final long serialVersionUID = -21295257;

    /**
     * The reference instance of <code>foundation_item.item_core</code>
     */
    public static final ItemCore ITEM_CORE = new ItemCore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemCoreRecord> getRecordType() {
        return ItemCoreRecord.class;
    }

    /**
     * The column <code>foundation_item.item_core.item_core_id</code>.
     */
    public final TableField<ItemCoreRecord, ULong> ITEM_CORE_ID = createField(DSL.name("item_core_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_item.item_core.item_id</code>. item id
     */
    public final TableField<ItemCoreRecord, ULong> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "item id");

    /**
     * The column <code>foundation_item.item_core.store_id</code>. 所属店铺ID
     */
    public final TableField<ItemCoreRecord, ULong> STORE_ID = createField(DSL.name("store_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "所属店铺ID");

    /**
     * The column <code>foundation_item.item_core.type</code>. 商品类型 . 不同类型的商品, 保存到各自不同的表中. 参考 https://learnwoo.com/woocommerce-different-product-types/
     */
    public final TableField<ItemCoreRecord, UByte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "商品类型 . 不同类型的商品, 保存到各自不同的表中. 参考 https://learnwoo.com/woocommerce-different-product-types/");

    /**
     * The column <code>foundation_item.item_core.state</code>. 状态
     */
    public final TableField<ItemCoreRecord, UByte> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "状态");

    /**
     * The column <code>foundation_item.item_core.create_time</code>.
     */
    public final TableField<ItemCoreRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_item.item_core.create_user_id</code>.
     */
    public final TableField<ItemCoreRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_item.item_core.last_modify_time</code>.
     */
    public final TableField<ItemCoreRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_item.item_core.last_modify_user_id</code>.
     */
    public final TableField<ItemCoreRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_item.item_core.is_deleted</code>.
     */
    public final TableField<ItemCoreRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_item.item_core</code> table reference
     */
    public ItemCore() {
        this(DSL.name("item_core"), null);
    }

    /**
     * Create an aliased <code>foundation_item.item_core</code> table reference
     */
    public ItemCore(String alias) {
        this(DSL.name(alias), ITEM_CORE);
    }

    /**
     * Create an aliased <code>foundation_item.item_core</code> table reference
     */
    public ItemCore(Name alias) {
        this(alias, ITEM_CORE);
    }

    private ItemCore(Name alias, Table<ItemCoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemCore(Name alias, Table<ItemCoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("物品核心信息，代表所有的物品，之前有把用户ID放进来，表示该物品所属的用户，但是考虑到如果有子账号的情况，物品难道属于这个子账号所属的用户吗？而且记录了创建人用户ID，考虑这两个因素，因此不设置用户ID列"), TableOptions.table());
    }

    public <O extends Record> ItemCore(Table<O> child, ForeignKey<O, ItemCoreRecord> key) {
        super(child, key, ITEM_CORE);
    }

    @Override
    public Schema getSchema() {
        return FoundationItem.FOUNDATION_ITEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_CORE_FK_STORE_ID, Indexes.ITEM_CORE_IDX_ITEM_ID);
    }

    @Override
    public Identity<ItemCoreRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ITEM_CORE;
    }

    @Override
    public UniqueKey<ItemCoreRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_CORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemCoreRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemCoreRecord>>asList(Keys.KEY_ITEM_CORE_PRIMARY);
    }

    @Override
    public ItemCore as(String alias) {
        return new ItemCore(DSL.name(alias), this);
    }

    @Override
    public ItemCore as(Name alias) {
        return new ItemCore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemCore rename(String name) {
        return new ItemCore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemCore rename(Name name) {
        return new ItemCore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
