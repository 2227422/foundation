/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.user.impl.jooq.gen.tables;


import com.wuda.foundation.user.impl.jooq.gen.Indexes;
import com.wuda.foundation.user.impl.jooq.gen.Keys;
import com.wuda.foundation.user.impl.jooq.gen.User;
import com.wuda.foundation.user.impl.jooq.gen.tables.records.UserRoleRelationshipRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 用户与角色的关联关系
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRoleRelationship extends TableImpl<UserRoleRelationshipRecord> {

    private static final long serialVersionUID = 1754857962;

    /**
     * The reference instance of <code>user.user_role_relationship</code>
     */
    public static final UserRoleRelationship USER_ROLE_RELATIONSHIP = new UserRoleRelationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRoleRelationshipRecord> getRecordType() {
        return UserRoleRelationshipRecord.class;
    }

    /**
     * The column <code>user.user_role_relationship.id</code>.
     */
    public final TableField<UserRoleRelationshipRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>user.user_role_relationship.user_id</code>.
     */
    public final TableField<UserRoleRelationshipRecord, ULong> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>user.user_role_relationship.role_id</code>.
     */
    public final TableField<UserRoleRelationshipRecord, ULong> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>user.user_role_relationship.create_time</code>.
     */
    public final TableField<UserRoleRelationshipRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user.user_role_relationship.create_user_id</code>.
     */
    public final TableField<UserRoleRelationshipRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>user.user_role_relationship.is_deleted</code>.
     */
    public final TableField<UserRoleRelationshipRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>user.user_role_relationship</code> table reference
     */
    public UserRoleRelationship() {
        this(DSL.name("user_role_relationship"), null);
    }

    /**
     * Create an aliased <code>user.user_role_relationship</code> table reference
     */
    public UserRoleRelationship(String alias) {
        this(DSL.name(alias), USER_ROLE_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>user.user_role_relationship</code> table reference
     */
    public UserRoleRelationship(Name alias) {
        this(alias, USER_ROLE_RELATIONSHIP);
    }

    private UserRoleRelationship(Name alias, Table<UserRoleRelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRoleRelationship(Name alias, Table<UserRoleRelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户与角色的关联关系"), TableOptions.table());
    }

    public <O extends Record> UserRoleRelationship(Table<O> child, ForeignKey<O, UserRoleRelationshipRecord> key) {
        super(child, key, USER_ROLE_RELATIONSHIP);
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ROLE_RELATIONSHIP_FK_ROLE_ID_IDX, Indexes.USER_ROLE_RELATIONSHIP_FK_USER_ID);
    }

    @Override
    public UniqueKey<UserRoleRelationshipRecord> getPrimaryKey() {
        return Keys.KEY_USER_ROLE_RELATIONSHIP_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRoleRelationshipRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRoleRelationshipRecord>>asList(Keys.KEY_USER_ROLE_RELATIONSHIP_PRIMARY);
    }

    @Override
    public UserRoleRelationship as(String alias) {
        return new UserRoleRelationship(DSL.name(alias), this);
    }

    @Override
    public UserRoleRelationship as(Name alias) {
        return new UserRoleRelationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoleRelationship rename(String name) {
        return new UserRoleRelationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoleRelationship rename(Name name) {
        return new UserRoleRelationship(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, ULong, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
