/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.user.impl.jooq.gen.tables.records;


import com.wuda.foundation.user.impl.jooq.gen.tables.User;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 用户有很多类型，比如一种分类方法是把用户分成个人用户和企业用户，而不同类型的用户需要的字段不一样，但是他们都是用户，即 is-a user。这个表属于所有用户的基本信息，其他不同类型的用户有自己专属的表，然后用用户ID关联回这个表。这样做还有一个好处，那就是其他表中的用户ID都统一关联回这个表，这样用户ID就不会有歧义了。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record8<Long, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> {

    private static final long serialVersionUID = 1025236691;

    /**
     * Setter for <code>user.user.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>user.user.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>user.user.type</code>. 用户类型
     */
    public void setType(UByte value) {
        set(1, value);
    }

    /**
     * Getter for <code>user.user.type</code>. 用户类型
     */
    public UByte getType() {
        return (UByte) get(1);
    }

    /**
     * Setter for <code>user.user.state</code>. 用户状态
     */
    public void setState(UByte value) {
        set(2, value);
    }

    /**
     * Getter for <code>user.user.state</code>. 用户状态
     */
    public UByte getState() {
        return (UByte) get(2);
    }

    /**
     * Setter for <code>user.user.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>user.user.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>user.user.create_user_id</code>.
     */
    public void setCreateUserId(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>user.user.create_user_id</code>.
     */
    public ULong getCreateUserId() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>user.user.last_modify_time</code>.
     */
    public void setLastModifyTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>user.user.last_modify_time</code>.
     */
    public LocalDateTime getLastModifyTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>user.user.last_modify_user_id</code>.
     */
    public void setLastModifyUserId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>user.user.last_modify_user_id</code>.
     */
    public ULong getLastModifyUserId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>user.user.is_deleted</code>.
     */
    public void setIsDeleted(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>user.user.is_deleted</code>.
     */
    public ULong getIsDeleted() {
        return (ULong) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return User.USER_.USER_ID;
    }

    @Override
    public Field<UByte> field2() {
        return User.USER_.TYPE;
    }

    @Override
    public Field<UByte> field3() {
        return User.USER_.STATE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return User.USER_.CREATE_TIME;
    }

    @Override
    public Field<ULong> field5() {
        return User.USER_.CREATE_USER_ID;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return User.USER_.LAST_MODIFY_TIME;
    }

    @Override
    public Field<ULong> field7() {
        return User.USER_.LAST_MODIFY_USER_ID;
    }

    @Override
    public Field<ULong> field8() {
        return User.USER_.IS_DELETED;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public UByte component2() {
        return getType();
    }

    @Override
    public UByte component3() {
        return getState();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateTime();
    }

    @Override
    public ULong component5() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime component6() {
        return getLastModifyTime();
    }

    @Override
    public ULong component7() {
        return getLastModifyUserId();
    }

    @Override
    public ULong component8() {
        return getIsDeleted();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public UByte value2() {
        return getType();
    }

    @Override
    public UByte value3() {
        return getState();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateTime();
    }

    @Override
    public ULong value5() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime value6() {
        return getLastModifyTime();
    }

    @Override
    public ULong value7() {
        return getLastModifyUserId();
    }

    @Override
    public ULong value8() {
        return getIsDeleted();
    }

    @Override
    public UserRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(UByte value) {
        setType(value);
        return this;
    }

    @Override
    public UserRecord value3(UByte value) {
        setState(value);
        return this;
    }

    @Override
    public UserRecord value4(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public UserRecord value5(ULong value) {
        setCreateUserId(value);
        return this;
    }

    @Override
    public UserRecord value6(LocalDateTime value) {
        setLastModifyTime(value);
        return this;
    }

    @Override
    public UserRecord value7(ULong value) {
        setLastModifyUserId(value);
        return this;
    }

    @Override
    public UserRecord value8(ULong value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public UserRecord values(Long value1, UByte value2, UByte value3, LocalDateTime value4, ULong value5, LocalDateTime value6, ULong value7, ULong value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER_);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long userId, UByte type, UByte state, LocalDateTime createTime, ULong createUserId, LocalDateTime lastModifyTime, ULong lastModifyUserId, ULong isDeleted) {
        super(User.USER_);

        set(0, userId);
        set(1, type);
        set(2, state);
        set(3, createTime);
        set(4, createUserId);
        set(5, lastModifyTime);
        set(6, lastModifyUserId);
        set(7, isDeleted);
    }
}
