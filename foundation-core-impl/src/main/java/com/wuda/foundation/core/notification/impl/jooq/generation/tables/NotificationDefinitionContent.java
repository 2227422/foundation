/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.core.notification.impl.jooq.generation.tables;


import com.wuda.foundation.core.notification.impl.jooq.generation.FoundationNotification;
import com.wuda.foundation.core.notification.impl.jooq.generation.Indexes;
import com.wuda.foundation.core.notification.impl.jooq.generation.Keys;
import com.wuda.foundation.core.notification.impl.jooq.generation.tables.records.NotificationDefinitionContentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * 定义通知的内容。【一个很重要的规则是】同一个定义，可以反复发送通知（比如，你是一个系统管理员，当主机cpu超过50%的时候，就发送通知给你，这个时候，你可以声明一个通知定义，然后只要主机cpu超过50，就通过这个定义发送消息给你，这种场景下，通知定义是一次性的，但是通过这个定义，会发送无数条通知），因此，每当使用这个定义发送通知时，就可以为这个定义声明发送的内容。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationDefinitionContent extends TableImpl<NotificationDefinitionContentRecord> {

    private static final long serialVersionUID = 1206702333;

    /**
     * The reference instance of <code>foundation_notification.notification_definition_content</code>
     */
    public static final NotificationDefinitionContent NOTIFICATION_DEFINITION_CONTENT = new NotificationDefinitionContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationDefinitionContentRecord> getRecordType() {
        return NotificationDefinitionContentRecord.class;
    }

    /**
     * The column <code>foundation_notification.notification_definition_content.notification_definition_content_id</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> NOTIFICATION_DEFINITION_CONTENT_ID = createField(DSL.name("notification_definition_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.notification_definitionf_id</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> NOTIFICATION_DEFINITIONF_ID = createField(DSL.name("notification_definitionf_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.notification_definition_send_method_id</code>. 表示这个内容由哪种方式发送，比如使用短信发送。这样做的一个好处是，每种发布方式都可以定义自己的内容，即短信可以发送适合短信息的内容，邮件可以发送丰富的邮件内容。
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> NOTIFICATION_DEFINITION_SEND_METHOD_ID = createField(DSL.name("notification_definition_send_method_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "表示这个内容由哪种方式发送，比如使用短信发送。这样做的一个好处是，每种发布方式都可以定义自己的内容，即短信可以发送适合短信息的内容，邮件可以发送丰富的邮件内容。");

    /**
     * The column <code>foundation_notification.notification_definition_content.title</code>. 声明通知的标题
     */
    public final TableField<NotificationDefinitionContentRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "声明通知的标题");

    /**
     * The column <code>foundation_notification.notification_definition_content.template_parameter</code>. 模板参数，使用模板后生成具体的通知内容。为什么要使用模板参数，而不直接使用通知内容呢？因为在有些场景下，会先定义通知模板，比如像短信，短信服务商（比如阿里云的短信发送服务），就是先定义模板；而有些场景可能是直接写好标题和内容，就直接发送了，为了兼容这两种情况，在数据库定义时就使用模板的方式，因为通过模板和模板参数就可以生成消息内容，对于那些不使用模板的通知，我们只需要内置一个模板，固定下来参数的名称，然后把通知内容保存时，使用这个参数作为key，通知内容作为value，就可以生成数据库需要的模板参数了，请查看notification_template中内置的模板。
     */
    public final TableField<NotificationDefinitionContentRecord, String> TEMPLATE_PARAMETER = createField(DSL.name("template_parameter"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "模板参数，使用模板后生成具体的通知内容。为什么要使用模板参数，而不直接使用通知内容呢？因为在有些场景下，会先定义通知模板，比如像短信，短信服务商（比如阿里云的短信发送服务），就是先定义模板；而有些场景可能是直接写好标题和内容，就直接发送了，为了兼容这两种情况，在数据库定义时就使用模板的方式，因为通过模板和模板参数就可以生成消息内容，对于那些不使用模板的通知，我们只需要内置一个模板，固定下来参数的名称，然后把通知内容保存时，使用这个参数作为key，通知内容作为value，就可以生成数据库需要的模板参数了，请查看notification_template中内置的模板。");

    /**
     * The column <code>foundation_notification.notification_definition_content.create_time</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.create_user_id</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.last_modify_time</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.last_modify_user_id</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_definition_content.is_deleted</code>.
     */
    public final TableField<NotificationDefinitionContentRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_notification.notification_definition_content</code> table reference
     */
    public NotificationDefinitionContent() {
        this(DSL.name("notification_definition_content"), null);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_content</code> table reference
     */
    public NotificationDefinitionContent(String alias) {
        this(DSL.name(alias), NOTIFICATION_DEFINITION_CONTENT);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_definition_content</code> table reference
     */
    public NotificationDefinitionContent(Name alias) {
        this(alias, NOTIFICATION_DEFINITION_CONTENT);
    }

    private NotificationDefinitionContent(Name alias, Table<NotificationDefinitionContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationDefinitionContent(Name alias, Table<NotificationDefinitionContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("定义通知的内容。【一个很重要的规则是】同一个定义，可以反复发送通知（比如，你是一个系统管理员，当主机cpu超过50%的时候，就发送通知给你，这个时候，你可以声明一个通知定义，然后只要主机cpu超过50，就通过这个定义发送消息给你，这种场景下，通知定义是一次性的，但是通过这个定义，会发送无数条通知），因此，每当使用这个定义发送通知时，就可以为这个定义声明发送的内容。"), TableOptions.table());
    }

    public <O extends Record> NotificationDefinitionContent(Table<O> child, ForeignKey<O, NotificationDefinitionContentRecord> key) {
        super(child, key, NOTIFICATION_DEFINITION_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return FoundationNotification.FOUNDATION_NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_DEFINITION_CONTENT_IDX_NOTIFICATION_DECLARATION_ID, Indexes.NOTIFICATION_DEFINITION_CONTENT_IDX_NOTIFICATION_DEFINITION_SEND_METHOD_ID);
    }

    @Override
    public Identity<NotificationDefinitionContentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION_DEFINITION_CONTENT;
    }

    @Override
    public UniqueKey<NotificationDefinitionContentRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_DEFINITION_CONTENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationDefinitionContentRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationDefinitionContentRecord>>asList(Keys.KEY_NOTIFICATION_DEFINITION_CONTENT_PRIMARY);
    }

    @Override
    public NotificationDefinitionContent as(String alias) {
        return new NotificationDefinitionContent(DSL.name(alias), this);
    }

    @Override
    public NotificationDefinitionContent as(Name alias) {
        return new NotificationDefinitionContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionContent rename(String name) {
        return new NotificationDefinitionContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationDefinitionContent rename(Name name) {
        return new NotificationDefinitionContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
