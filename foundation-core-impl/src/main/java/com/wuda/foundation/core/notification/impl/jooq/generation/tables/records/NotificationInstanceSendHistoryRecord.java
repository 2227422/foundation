/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.core.notification.impl.jooq.generation.tables.records;


import com.wuda.foundation.core.notification.impl.jooq.generation.tables.NotificationInstanceSendHistory;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;

import java.time.LocalDateTime;


/**
 * 通知发送历史
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationInstanceSendHistoryRecord extends UpdatableRecordImpl<NotificationInstanceSendHistoryRecord> implements Record8<ULong, ULong, LocalDateTime, UByte, ULong, Byte, ULong, ULong> {

    private static final long serialVersionUID = 906460983;

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.notification_instance_send_history_id</code>.
     */
    public void setNotificationInstanceSendHistoryId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.notification_instance_send_history_id</code>.
     */
    public ULong getNotificationInstanceSendHistoryId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.notification_instance_content_id</code>. 如果同一个通知（内容一模一样）发送多次的，使用这个指针指向该通知，则会节省很多空间
     */
    public void setNotificationInstanceContentId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.notification_instance_content_id</code>. 如果同一个通知（内容一模一样）发送多次的，使用这个指针指向该通知，则会节省很多空间
     */
    public ULong getNotificationInstanceContentId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.send_time</code>.
     */
    public void setSendTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.send_time</code>.
     */
    public LocalDateTime getSendTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.sender_type</code>. 发送者类型，不一定是某个人发送，比如是服务A发送给服务B。
     */
    public void setSenderType(UByte value) {
        set(3, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.sender_type</code>. 发送者类型，不一定是某个人发送，比如是服务A发送给服务B。
     */
    public UByte getSenderType() {
        return (UByte) get(3);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.sender_identifier</code>. 发送者唯一标记
     */
    public void setSenderIdentifier(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.sender_identifier</code>. 发送者唯一标记
     */
    public ULong getSenderIdentifier() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.receiver_type</code>. 接收者类型，不一定发个人，也可以发给某个分组等
     */
    public void setReceiverType(Byte value) {
        set(5, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.receiver_type</code>. 接收者类型，不一定发个人，也可以发给某个分组等
     */
    public Byte getReceiverType() {
        return (Byte) get(5);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.receiver_identifier</code>. 接收者唯一标记符
     */
    public void setReceiverIdentifier(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.receiver_identifier</code>. 接收者唯一标记符
     */
    public ULong getReceiverIdentifier() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>foundation_notification.notification_instance_send_history.is_deleted</code>.
     */
    public void setIsDeleted(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>foundation_notification.notification_instance_send_history.is_deleted</code>.
     */
    public ULong getIsDeleted() {
        return (ULong) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, LocalDateTime, UByte, ULong, Byte, ULong, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<ULong, ULong, LocalDateTime, UByte, ULong, Byte, ULong, ULong> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.NOTIFICATION_INSTANCE_SEND_HISTORY_ID;
    }

    @Override
    public Field<ULong> field2() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.NOTIFICATION_INSTANCE_CONTENT_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.SEND_TIME;
    }

    @Override
    public Field<UByte> field4() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.SENDER_TYPE;
    }

    @Override
    public Field<ULong> field5() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.SENDER_IDENTIFIER;
    }

    @Override
    public Field<Byte> field6() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.RECEIVER_TYPE;
    }

    @Override
    public Field<ULong> field7() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.RECEIVER_IDENTIFIER;
    }

    @Override
    public Field<ULong> field8() {
        return NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY.IS_DELETED;
    }

    @Override
    public ULong component1() {
        return getNotificationInstanceSendHistoryId();
    }

    @Override
    public ULong component2() {
        return getNotificationInstanceContentId();
    }

    @Override
    public LocalDateTime component3() {
        return getSendTime();
    }

    @Override
    public UByte component4() {
        return getSenderType();
    }

    @Override
    public ULong component5() {
        return getSenderIdentifier();
    }

    @Override
    public Byte component6() {
        return getReceiverType();
    }

    @Override
    public ULong component7() {
        return getReceiverIdentifier();
    }

    @Override
    public ULong component8() {
        return getIsDeleted();
    }

    @Override
    public ULong value1() {
        return getNotificationInstanceSendHistoryId();
    }

    @Override
    public ULong value2() {
        return getNotificationInstanceContentId();
    }

    @Override
    public LocalDateTime value3() {
        return getSendTime();
    }

    @Override
    public UByte value4() {
        return getSenderType();
    }

    @Override
    public ULong value5() {
        return getSenderIdentifier();
    }

    @Override
    public Byte value6() {
        return getReceiverType();
    }

    @Override
    public ULong value7() {
        return getReceiverIdentifier();
    }

    @Override
    public ULong value8() {
        return getIsDeleted();
    }

    @Override
    public NotificationInstanceSendHistoryRecord value1(ULong value) {
        setNotificationInstanceSendHistoryId(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value2(ULong value) {
        setNotificationInstanceContentId(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value3(LocalDateTime value) {
        setSendTime(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value4(UByte value) {
        setSenderType(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value5(ULong value) {
        setSenderIdentifier(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value6(Byte value) {
        setReceiverType(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value7(ULong value) {
        setReceiverIdentifier(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord value8(ULong value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public NotificationInstanceSendHistoryRecord values(ULong value1, ULong value2, LocalDateTime value3, UByte value4, ULong value5, Byte value6, ULong value7, ULong value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationInstanceSendHistoryRecord
     */
    public NotificationInstanceSendHistoryRecord() {
        super(NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY);
    }

    /**
     * Create a detached, initialised NotificationInstanceSendHistoryRecord
     */
    public NotificationInstanceSendHistoryRecord(ULong notificationInstanceSendHistoryId, ULong notificationInstanceContentId, LocalDateTime sendTime, UByte senderType, ULong senderIdentifier, Byte receiverType, ULong receiverIdentifier, ULong isDeleted) {
        super(NotificationInstanceSendHistory.NOTIFICATION_INSTANCE_SEND_HISTORY);

        set(0, notificationInstanceSendHistoryId);
        set(1, notificationInstanceContentId);
        set(2, sendTime);
        set(3, senderType);
        set(4, senderIdentifier);
        set(5, receiverType);
        set(6, receiverIdentifier);
        set(7, isDeleted);
    }
}
