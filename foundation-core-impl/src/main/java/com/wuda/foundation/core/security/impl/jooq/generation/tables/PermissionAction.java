/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.core.security.impl.jooq.generation.tables;


import com.wuda.foundation.core.security.impl.jooq.generation.FoundationSecurity;
import com.wuda.foundation.core.security.impl.jooq.generation.Indexes;
import com.wuda.foundation.core.security.impl.jooq.generation.Keys;
import com.wuda.foundation.core.security.impl.jooq.generation.tables.records.PermissionActionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * permission允许的行为。参考: java.security.Permission#getActions。为什么要把作用对象和对该对象的action分开呢？因为对于同一个作用对象，可能有多个action，比如对于一个文件可以有读和写权限。action可以关联外部对象，具体的解释可以参考permission 
 * targe ,它们对于关联外部对象的定义是一样的。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionAction extends TableImpl<PermissionActionRecord> {

    private static final long serialVersionUID = 986037323;

    /**
     * The reference instance of <code>foundation_security.permission_action</code>
     */
    public static final PermissionAction PERMISSION_ACTION = new PermissionAction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionActionRecord> getRecordType() {
        return PermissionActionRecord.class;
    }

    /**
     * The column <code>foundation_security.permission_action.permission_action_id</code>.
     */
    public final TableField<PermissionActionRecord, ULong> PERMISSION_ACTION_ID = createField(DSL.name("permission_action_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_security.permission_action.permission_target_id</code>.
     */
    public final TableField<PermissionActionRecord, ULong> PERMISSION_TARGET_ID = createField(DSL.name("permission_target_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.permission_action.name</code>. action name
     */
    public final TableField<PermissionActionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "action name");

    /**
     * The column <code>foundation_security.permission_action.description</code>.
     */
    public final TableField<PermissionActionRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>foundation_security.permission_action.referenced_type</code>. 关联的外部对象的类型，0表示没有关联其他外部对象。
     */
    public final TableField<PermissionActionRecord, UByte> REFERENCED_TYPE = createField(DSL.name("referenced_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "关联的外部对象的类型，0表示没有关联其他外部对象。");

    /**
     * The column <code>foundation_security.permission_action.referenced_identifier</code>. 关联的外部对象的identifier，0表示没有关联外部对象。
     */
    public final TableField<PermissionActionRecord, ULong> REFERENCED_IDENTIFIER = createField(DSL.name("referenced_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "关联的外部对象的identifier，0表示没有关联外部对象。");

    /**
     * The column <code>foundation_security.permission_action.create_time</code>.
     */
    public final TableField<PermissionActionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_security.permission_action.create_user_id</code>.
     */
    public final TableField<PermissionActionRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.permission_action.last_modify_time</code>.
     */
    public final TableField<PermissionActionRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_security.permission_action.last_modify_user_id</code>.
     */
    public final TableField<PermissionActionRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.permission_action.is_deleted</code>.
     */
    public final TableField<PermissionActionRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_security.permission_action</code> table reference
     */
    public PermissionAction() {
        this(DSL.name("permission_action"), null);
    }

    /**
     * Create an aliased <code>foundation_security.permission_action</code> table reference
     */
    public PermissionAction(String alias) {
        this(DSL.name(alias), PERMISSION_ACTION);
    }

    /**
     * Create an aliased <code>foundation_security.permission_action</code> table reference
     */
    public PermissionAction(Name alias) {
        this(alias, PERMISSION_ACTION);
    }

    private PermissionAction(Name alias, Table<PermissionActionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PermissionAction(Name alias, Table<PermissionActionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("permission允许的行为。参考: java.security.Permission#getActions。为什么要把作用对象和对该对象的action分开呢？因为对于同一个作用对象，可能有多个action，比如对于一个文件可以有读和写权限。action可以关联外部对象，具体的解释可以参考permission targe ,它们对于关联外部对象的定义是一样的。"), TableOptions.table());
    }

    public <O extends Record> PermissionAction(Table<O> child, ForeignKey<O, PermissionActionRecord> key) {
        super(child, key, PERMISSION_ACTION);
    }

    @Override
    public Schema getSchema() {
        return FoundationSecurity.FOUNDATION_SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERMISSION_ACTION_FK_PERMISSION_TARGET_ID, Indexes.PERMISSION_ACTION_IDX_REFERENCED_OBJECT);
    }

    @Override
    public Identity<PermissionActionRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PERMISSION_ACTION;
    }

    @Override
    public UniqueKey<PermissionActionRecord> getPrimaryKey() {
        return Keys.KEY_PERMISSION_ACTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<PermissionActionRecord>> getKeys() {
        return Arrays.<UniqueKey<PermissionActionRecord>>asList(Keys.KEY_PERMISSION_ACTION_PRIMARY, Keys.KEY_PERMISSION_ACTION_IDX_PERMISSION_ACTION);
    }

    @Override
    public PermissionAction as(String alias) {
        return new PermissionAction(DSL.name(alias), this);
    }

    @Override
    public PermissionAction as(Name alias) {
        return new PermissionAction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionAction rename(String name) {
        return new PermissionAction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionAction rename(Name name) {
        return new PermissionAction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, String, String, UByte, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
