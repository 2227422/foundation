/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.core.item.impl.jooq.generation.tables;


import com.wuda.foundation.core.item.impl.jooq.generation.FoundationItem;
import com.wuda.foundation.core.item.impl.jooq.generation.Indexes;
import com.wuda.foundation.core.item.impl.jooq.generation.Keys;
import com.wuda.foundation.core.item.impl.jooq.generation.tables.records.ItemCategoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * 物品分类
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemCategory extends TableImpl<ItemCategoryRecord> {

    private static final long serialVersionUID = 1043343277;

    /**
     * The reference instance of <code>foundation_item.item_category</code>
     */
    public static final ItemCategory ITEM_CATEGORY = new ItemCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemCategoryRecord> getRecordType() {
        return ItemCategoryRecord.class;
    }

    /**
     * The column <code>foundation_item.item_category.item_category_id</code>. 一定和【tree_node.tree_node_id】相等，因为实际表示树形结构的数据在tree_node表中，这里只是对tree_node的引用。tree_node表负责树形结构的维护，这里维护树形结构以外的内容，比如store_id字段用于维护归属。一定和【group.group_id】相等，因为分类是一种组。
     */
    public final TableField<ItemCategoryRecord, ULong> ITEM_CATEGORY_ID = createField(DSL.name("item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "一定和【tree_node.tree_node_id】相等，因为实际表示树形结构的数据在tree_node表中，这里只是对tree_node的引用。tree_node表负责树形结构的维护，这里维护树形结构以外的内容，比如store_id字段用于维护归属。一定和【group.group_id】相等，因为分类是一种组。");

    /**
     * The column <code>foundation_item.item_category.parent_item_category_id</code>. 父节点ID
     */
    public final TableField<ItemCategoryRecord, ULong> PARENT_ITEM_CATEGORY_ID = createField(DSL.name("parent_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "父节点ID");

    /**
     * The column <code>foundation_item.item_category.root_item_category_id</code>.
     */
    public final TableField<ItemCategoryRecord, ULong> ROOT_ITEM_CATEGORY_ID = createField(DSL.name("root_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_item.item_category.store_id</code>. 所属店铺ID
     */
    public final TableField<ItemCategoryRecord, ULong> STORE_ID = createField(DSL.name("store_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "所属店铺ID");

    /**
     * The column <code>foundation_item.item_category.depth</code>. depth
     */
    public final TableField<ItemCategoryRecord, UByte> DEPTH = createField(DSL.name("depth"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "depth");

    /**
     * The column <code>foundation_item.item_category.name</code>. 分类名称
     */
    public final TableField<ItemCategoryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "分类名称");

    /**
     * The column <code>foundation_item.item_category.description</code>. 描述
     */
    public final TableField<ItemCategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "描述");

    /**
     * The column <code>foundation_item.item_category.create_time</code>.
     */
    public final TableField<ItemCategoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_item.item_category.create_user_id</code>.
     */
    public final TableField<ItemCategoryRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_item.item_category.last_modify_time</code>.
     */
    public final TableField<ItemCategoryRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_item.item_category.last_modify_user_id</code>.
     */
    public final TableField<ItemCategoryRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_item.item_category.is_deleted</code>.
     */
    public final TableField<ItemCategoryRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_item.item_category</code> table reference
     */
    public ItemCategory() {
        this(DSL.name("item_category"), null);
    }

    /**
     * Create an aliased <code>foundation_item.item_category</code> table reference
     */
    public ItemCategory(String alias) {
        this(DSL.name(alias), ITEM_CATEGORY);
    }

    /**
     * Create an aliased <code>foundation_item.item_category</code> table reference
     */
    public ItemCategory(Name alias) {
        this(alias, ITEM_CATEGORY);
    }

    private ItemCategory(Name alias, Table<ItemCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemCategory(Name alias, Table<ItemCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("物品分类"), TableOptions.table());
    }

    public <O extends Record> ItemCategory(Table<O> child, ForeignKey<O, ItemCategoryRecord> key) {
        super(child, key, ITEM_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return FoundationItem.FOUNDATION_ITEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_CATEGORY_IDX_PARENT, Indexes.ITEM_CATEGORY_IDX_ROOT, Indexes.ITEM_CATEGORY_IDX_STORE_ID);
    }

    @Override
    public Identity<ItemCategoryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ITEM_CATEGORY;
    }

    @Override
    public UniqueKey<ItemCategoryRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemCategoryRecord>>asList(Keys.KEY_ITEM_CATEGORY_PRIMARY);
    }

    @Override
    public ItemCategory as(String alias) {
        return new ItemCategory(DSL.name(alias), this);
    }

    @Override
    public ItemCategory as(Name alias) {
        return new ItemCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemCategory rename(String name) {
        return new ItemCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemCategory rename(Name name) {
        return new ItemCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, ULong, ULong, ULong, UByte, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
