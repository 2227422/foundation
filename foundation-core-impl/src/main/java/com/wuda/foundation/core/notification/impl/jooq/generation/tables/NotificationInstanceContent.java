/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.core.notification.impl.jooq.generation.tables;


import com.wuda.foundation.core.notification.impl.jooq.generation.FoundationNotification;
import com.wuda.foundation.core.notification.impl.jooq.generation.Indexes;
import com.wuda.foundation.core.notification.impl.jooq.generation.Keys;
import com.wuda.foundation.core.notification.impl.jooq.generation.tables.records.NotificationInstanceContentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * 代表一条实际已经发送的通知。通知模块的设计，不局限于发给用户，或者从用户发出来，任何实体都可以发送和接收，比如service A可以发送给service 
 * B，因此会有receiver type和sender type的设计。同样的内容，可以通过多种方式发送，比如通过邮件，短信发送同样的内容，因此发送方式不放到这个表中，这样的好处是不同的发送方式可以指向（共享）同一个通知。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationInstanceContent extends TableImpl<NotificationInstanceContentRecord> {

    private static final long serialVersionUID = 947899330;

    /**
     * The reference instance of <code>foundation_notification.notification_instance_content</code>
     */
    public static final NotificationInstanceContent NOTIFICATION_INSTANCE_CONTENT = new NotificationInstanceContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationInstanceContentRecord> getRecordType() {
        return NotificationInstanceContentRecord.class;
    }

    /**
     * The column <code>foundation_notification.notification_instance_content.notification_instance_content_id</code>.
     */
    public final TableField<NotificationInstanceContentRecord, ULong> NOTIFICATION_INSTANCE_CONTENT_ID = createField(DSL.name("notification_instance_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_content.notification_definition_id</code>. 该通知基于哪个定义生成
     */
    public final TableField<NotificationInstanceContentRecord, ULong> NOTIFICATION_DEFINITION_ID = createField(DSL.name("notification_definition_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "该通知基于哪个定义生成");

    /**
     * The column <code>foundation_notification.notification_instance_content.notification_definition_send_method_id</code>. 该内容由哪种方式方式
     */
    public final TableField<NotificationInstanceContentRecord, ULong> NOTIFICATION_DEFINITION_SEND_METHOD_ID = createField(DSL.name("notification_definition_send_method_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "该内容由哪种方式方式");

    /**
     * The column <code>foundation_notification.notification_instance_content.notification_definition_content_id</code>. 由于同一个定义可以反复发送通知，因此，必须加上该字段，以便区分这个通知是由定义的哪个内容发送出来的。
     */
    public final TableField<NotificationInstanceContentRecord, ULong> NOTIFICATION_DEFINITION_CONTENT_ID = createField(DSL.name("notification_definition_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "由于同一个定义可以反复发送通知，因此，必须加上该字段，以便区分这个通知是由定义的哪个内容发送出来的。");

    /**
     * The column <code>foundation_notification.notification_instance_content.notification_category_id</code>. 所属分类ID
     */
    public final TableField<NotificationInstanceContentRecord, ULong> NOTIFICATION_CATEGORY_ID = createField(DSL.name("notification_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "所属分类ID");

    /**
     * The column <code>foundation_notification.notification_instance_content.title</code>. 标题
     */
    public final TableField<NotificationInstanceContentRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(45).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "标题");

    /**
     * The column <code>foundation_notification.notification_instance_content.body</code>. 消息的实际内容,命名参考html body
     */
    public final TableField<NotificationInstanceContentRecord, String> BODY = createField(DSL.name("body"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "消息的实际内容,命名参考html body");

    /**
     * The column <code>foundation_notification.notification_instance_content.create_time</code>.
     */
    public final TableField<NotificationInstanceContentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_content.create_user_id</code>.
     */
    public final TableField<NotificationInstanceContentRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_content.last_modify_time</code>.
     */
    public final TableField<NotificationInstanceContentRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_content.last_modify_user_id</code>.
     */
    public final TableField<NotificationInstanceContentRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_notification.notification_instance_content.is_deleted</code>.
     */
    public final TableField<NotificationInstanceContentRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_notification.notification_instance_content</code> table reference
     */
    public NotificationInstanceContent() {
        this(DSL.name("notification_instance_content"), null);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_instance_content</code> table reference
     */
    public NotificationInstanceContent(String alias) {
        this(DSL.name(alias), NOTIFICATION_INSTANCE_CONTENT);
    }

    /**
     * Create an aliased <code>foundation_notification.notification_instance_content</code> table reference
     */
    public NotificationInstanceContent(Name alias) {
        this(alias, NOTIFICATION_INSTANCE_CONTENT);
    }

    private NotificationInstanceContent(Name alias, Table<NotificationInstanceContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationInstanceContent(Name alias, Table<NotificationInstanceContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("代表一条实际已经发送的通知。通知模块的设计，不局限于发给用户，或者从用户发出来，任何实体都可以发送和接收，比如service A可以发送给service B，因此会有receiver type和sender type的设计。同样的内容，可以通过多种方式发送，比如通过邮件，短信发送同样的内容，因此发送方式不放到这个表中，这样的好处是不同的发送方式可以指向（共享）同一个通知。"), TableOptions.table());
    }

    public <O extends Record> NotificationInstanceContent(Table<O> child, ForeignKey<O, NotificationInstanceContentRecord> key) {
        super(child, key, NOTIFICATION_INSTANCE_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return FoundationNotification.FOUNDATION_NOTIFICATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_INSTANCE_CONTENT_IDX_CATEGORY, Indexes.NOTIFICATION_INSTANCE_CONTENT_IDX_NOTIFICATION_DEFINITION_CONTENT_ID, Indexes.NOTIFICATION_INSTANCE_CONTENT_IDX_NOTIFICATION_DEFINITION_SEND_METHOD_ID);
    }

    @Override
    public Identity<NotificationInstanceContentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION_INSTANCE_CONTENT;
    }

    @Override
    public UniqueKey<NotificationInstanceContentRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_INSTANCE_CONTENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<NotificationInstanceContentRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationInstanceContentRecord>>asList(Keys.KEY_NOTIFICATION_INSTANCE_CONTENT_PRIMARY);
    }

    @Override
    public NotificationInstanceContent as(String alias) {
        return new NotificationInstanceContent(DSL.name(alias), this);
    }

    @Override
    public NotificationInstanceContent as(Name alias) {
        return new NotificationInstanceContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInstanceContent rename(String name) {
        return new NotificationInstanceContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationInstanceContent rename(Name name) {
        return new NotificationInstanceContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, ULong, ULong, ULong, ULong, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
