/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.security.tables;


import com.wuda.foundation.jooq.code.generation.security.FoundationSecurity;
import com.wuda.foundation.jooq.code.generation.security.Indexes;
import com.wuda.foundation.jooq.code.generation.security.Keys;
import com.wuda.foundation.jooq.code.generation.security.tables.records.PermissionAssignmentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;
import org.jooq.types.UShort;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * 权限分配。subject可以代表任何主体，比如用户，或者想要访问其他资源的应用，因此我们可以说user 【IS A】 subject 。target可以代表任何对象，比如file，因此我们可以说file 
 * 【IS A】 target。action可以代表任何操作，比如read/write。subject , target , action这三个实体，不一定是某个具体的单个实体，也可以是一类实体，比如target如果是文件夹，那么可以代表subject对这个文件夹下的所有文件以及子文件夹（递归）都拥有权限；同样
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionAssignment extends TableImpl<PermissionAssignmentRecord> {

    private static final long serialVersionUID = 1919826226;

    /**
     * The reference instance of <code>foundation_security.permission_assignment</code>
     */
    public static final PermissionAssignment PERMISSION_ASSIGNMENT = new PermissionAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionAssignmentRecord> getRecordType() {
        return PermissionAssignmentRecord.class;
    }

    /**
     * The column <code>foundation_security.permission_assignment.id</code>.
     */
    public final TableField<PermissionAssignmentRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_security.permission_assignment.subject_type</code>. subject的类型，比如subject代表用户
     */
    public final TableField<PermissionAssignmentRecord, UByte> SUBJECT_TYPE = createField(DSL.name("subject_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "subject的类型，比如subject代表用户");

    /**
     * The column <code>foundation_security.permission_assignment.subject_identifier</code>. 如果subject type代表用户，那么这个值可能就是用户ID
     */
    public final TableField<PermissionAssignmentRecord, ULong> SUBJECT_IDENTIFIER = createField(DSL.name("subject_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "如果subject type代表用户，那么这个值可能就是用户ID");

    /**
     * The column <code>foundation_security.permission_assignment.target_type</code>. target的类型，比如target代表文件
     */
    public final TableField<PermissionAssignmentRecord, UShort> TARGET_TYPE = createField(DSL.name("target_type"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "target的类型，比如target代表文件");

    /**
     * The column <code>foundation_security.permission_assignment.target_identifier</code>. target的唯一标记符
     */
    public final TableField<PermissionAssignmentRecord, ULong> TARGET_IDENTIFIER = createField(DSL.name("target_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "target的唯一标记符");

    /**
     * The column <code>foundation_security.permission_assignment.action_type</code>. action的类型
     */
    public final TableField<PermissionAssignmentRecord, UShort> ACTION_TYPE = createField(DSL.name("action_type"), org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "action的类型");

    /**
     * The column <code>foundation_security.permission_assignment.action_identifier</code>. action的唯一标记符
     */
    public final TableField<PermissionAssignmentRecord, ULong> ACTION_IDENTIFIER = createField(DSL.name("action_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "action的唯一标记符");

    /**
     * The column <code>foundation_security.permission_assignment.inclusion</code>. inclusion or exclusion，虽然为subject分配了target和action，但不一定是拥有，也可以是排除
     */
    public final TableField<PermissionAssignmentRecord, Boolean> INCLUSION = createField(DSL.name("inclusion"), org.jooq.impl.SQLDataType.BIT.nullable(false), this, "inclusion or exclusion，虽然为subject分配了target和action，但不一定是拥有，也可以是排除");

    /**
     * The column <code>foundation_security.permission_assignment.create_time</code>.
     */
    public final TableField<PermissionAssignmentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_security.permission_assignment.create_user_id</code>.
     */
    public final TableField<PermissionAssignmentRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_security.permission_assignment.is_deleted</code>.
     */
    public final TableField<PermissionAssignmentRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_security.permission_assignment</code> table reference
     */
    public PermissionAssignment() {
        this(DSL.name("permission_assignment"), null);
    }

    /**
     * Create an aliased <code>foundation_security.permission_assignment</code> table reference
     */
    public PermissionAssignment(String alias) {
        this(DSL.name(alias), PERMISSION_ASSIGNMENT);
    }

    /**
     * Create an aliased <code>foundation_security.permission_assignment</code> table reference
     */
    public PermissionAssignment(Name alias) {
        this(alias, PERMISSION_ASSIGNMENT);
    }

    private PermissionAssignment(Name alias, Table<PermissionAssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PermissionAssignment(Name alias, Table<PermissionAssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("权限分配。subject可以代表任何主体，比如用户，或者想要访问其他资源的应用，因此我们可以说user 【IS A】 subject 。target可以代表任何对象，比如file，因此我们可以说file 【IS A】 target。action可以代表任何操作，比如read/write。subject , target , action这三个实体，不一定是某个具体的单个实体，也可以是一类实体，比如target如果是文件夹，那么可以代表subject对这个文件夹下的所有文件以及子文件夹（递归）都拥有权限；同样"), TableOptions.table());
    }

    public <O extends Record> PermissionAssignment(Table<O> child, ForeignKey<O, PermissionAssignmentRecord> key) {
        super(child, key, PERMISSION_ASSIGNMENT);
    }

    @Override
    public Schema getSchema() {
        return FoundationSecurity.FOUNDATION_SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERMISSION_ASSIGNMENT_IDX_ACTION, Indexes.PERMISSION_ASSIGNMENT_IDX_SUBJECT, Indexes.PERMISSION_ASSIGNMENT_IDX_TARGET);
    }

    @Override
    public Identity<PermissionAssignmentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PERMISSION_ASSIGNMENT;
    }

    @Override
    public UniqueKey<PermissionAssignmentRecord> getPrimaryKey() {
        return Keys.KEY_PERMISSION_ASSIGNMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PermissionAssignmentRecord>> getKeys() {
        return Arrays.<UniqueKey<PermissionAssignmentRecord>>asList(Keys.KEY_PERMISSION_ASSIGNMENT_PRIMARY);
    }

    @Override
    public PermissionAssignment as(String alias) {
        return new PermissionAssignment(DSL.name(alias), this);
    }

    @Override
    public PermissionAssignment as(Name alias) {
        return new PermissionAssignment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionAssignment rename(String name) {
        return new PermissionAssignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionAssignment rename(Name name) {
        return new PermissionAssignment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, UByte, ULong, UShort, ULong, UShort, ULong, Boolean, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
