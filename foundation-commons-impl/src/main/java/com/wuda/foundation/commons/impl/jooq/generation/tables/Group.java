/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.commons.impl.jooq.generation.tables;


import com.wuda.foundation.commons.impl.jooq.generation.FoundationCommons;
import com.wuda.foundation.commons.impl.jooq.generation.Indexes;
import com.wuda.foundation.commons.impl.jooq.generation.Keys;
import com.wuda.foundation.commons.impl.jooq.generation.tables.records.GroupRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 店铺是一种组，组织机构是一种组，部门也是一种组，等等，这个表就作为所有这些组的基础结构。为什么要用一个组这样的基础表呢？原因是：1，这些组有很多相同的概念，因此可以统一处理这些组相关的逻辑,；2，组织机构等是可以有上下级的，因此，基于tree_node统一处理所有这些组的树形结构；3，基本上所有的实体都有以某种方式组织起来（比如分类），但是很多实体的组织在业务发展的一开始不是很明确的，比如用户属于公司某个部门，但是随着业务的发展，为用户创建了群（比如微信的群），如果使用抽象的group_id和user_id
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Group extends TableImpl<GroupRecord> {

    private static final long serialVersionUID = 257491525;

    /**
     * The reference instance of <code>foundation_commons.group</code>
     */
    public static final Group GROUP = new Group();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupRecord> getRecordType() {
        return GroupRecord.class;
    }

    /**
     * The column <code>foundation_commons.group.group_id</code>.
     */
    public final TableField<GroupRecord, ULong> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.group.parent_group_id</code>. 父级组ID
     */
    public final TableField<GroupRecord, ULong> PARENT_GROUP_ID = createField(DSL.name("parent_group_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "父级组ID");

    /**
     * The column <code>foundation_commons.group.create_time</code>.
     */
    public final TableField<GroupRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.group.create_user_id</code>.
     */
    public final TableField<GroupRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.group.last_modify_time</code>.
     */
    public final TableField<GroupRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.group.last_modify_user_id</code>.
     */
    public final TableField<GroupRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.group.is_deleted</code>.
     */
    public final TableField<GroupRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.group</code> table reference
     */
    public Group() {
        this(DSL.name("group"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.group</code> table reference
     */
    public Group(String alias) {
        this(DSL.name(alias), GROUP);
    }

    /**
     * Create an aliased <code>foundation_commons.group</code> table reference
     */
    public Group(Name alias) {
        this(alias, GROUP);
    }

    private Group(Name alias, Table<GroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Group(Name alias, Table<GroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("店铺是一种组，组织机构是一种组，部门也是一种组，等等，这个表就作为所有这些组的基础结构。为什么要用一个组这样的基础表呢？原因是：1，这些组有很多相同的概念，因此可以统一处理这些组相关的逻辑,；2，组织机构等是可以有上下级的，因此，基于tree_node统一处理所有这些组的树形结构；3，基本上所有的实体都有以某种方式组织起来（比如分类），但是很多实体的组织在业务发展的一开始不是很明确的，比如用户属于公司某个部门，但是随着业务的发展，为用户创建了群（比如微信的群），如果使用抽象的group_id和user_id"), TableOptions.table());
    }

    public <O extends Record> Group(Table<O> child, ForeignKey<O, GroupRecord> key) {
        super(child, key, GROUP);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GROUP_IDX_PARENT_GROUP_ID);
    }

    @Override
    public Identity<GroupRecord, ULong> getIdentity() {
        return Keys.IDENTITY_GROUP;
    }

    @Override
    public UniqueKey<GroupRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<GroupRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupRecord>>asList(Keys.KEY_GROUP_PRIMARY);
    }

    @Override
    public Group as(String alias) {
        return new Group(DSL.name(alias), this);
    }

    @Override
    public Group as(Name alias) {
        return new Group(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Group rename(String name) {
        return new Group(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Group rename(Name name) {
        return new Group(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
