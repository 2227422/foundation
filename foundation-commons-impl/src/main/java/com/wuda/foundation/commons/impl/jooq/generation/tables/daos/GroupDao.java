/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.commons.impl.jooq.generation.tables.daos;


import com.wuda.foundation.commons.impl.jooq.generation.tables.Group;
import com.wuda.foundation.commons.impl.jooq.generation.tables.records.GroupRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * 店铺是一种组，组织机构是一种组，部门也是一种组，等等，这个表就作为所有这些组的基础结构。为什么要用一个组这样的基础表呢？原因是：1，这些组有很多相同的概念，因此可以统一处理这些组相关的逻辑,；2，组织机构等是可以有上下级的，因此，基于tree_node统一处理所有这些组的树形结构；3，基本上所有的实体都有以某种方式组织起来（比如分类），但是很多实体的组织在业务发展的一开始不是很明确的，比如用户属于公司某个部门，但是随着业务的发展，为用户创建了群（比如微信的群），如果使用抽象的group_id和user_id
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupDao extends DAOImpl<GroupRecord, com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group, ULong> {

    /**
     * Create a new GroupDao without any configuration
     */
    public GroupDao() {
        super(Group.GROUP, com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group.class);
    }

    /**
     * Create a new GroupDao with an attached configuration
     */
    public GroupDao(Configuration configuration) {
        super(Group.GROUP, com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group.class, configuration);
    }

    @Override
    public ULong getId(com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group object) {
        return object.getGroupId();
    }

    /**
     * Fetch records that have <code>group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfGroupId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Group.GROUP.GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_id IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByGroupId(ULong... values) {
        return fetch(Group.GROUP.GROUP_ID, values);
    }

    /**
     * Fetch a unique record that has <code>group_id = value</code>
     */
    public com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group fetchOneByGroupId(ULong value) {
        return fetchOne(Group.GROUP.GROUP_ID, value);
    }

    /**
     * Fetch records that have <code>parent_group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfParentGroupId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Group.GROUP.PARENT_GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_group_id IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByParentGroupId(ULong... values) {
        return fetch(Group.GROUP.PARENT_GROUP_ID, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Group.GROUP.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Group.GROUP.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>create_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfCreateUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Group.GROUP.CREATE_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user_id IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByCreateUserId(ULong... values) {
        return fetch(Group.GROUP.CREATE_USER_ID, values);
    }

    /**
     * Fetch records that have <code>last_modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfLastModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Group.GROUP.LAST_MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_modify_time IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByLastModifyTime(LocalDateTime... values) {
        return fetch(Group.GROUP.LAST_MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>last_modify_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfLastModifyUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Group.GROUP.LAST_MODIFY_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_modify_user_id IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByLastModifyUserId(ULong... values) {
        return fetch(Group.GROUP.LAST_MODIFY_USER_ID, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchRangeOfIsDeleted(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Group.GROUP.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<com.wuda.foundation.commons.impl.jooq.generation.tables.pojos.Group> fetchByIsDeleted(ULong... values) {
        return fetch(Group.GROUP.IS_DELETED, values);
    }
}
