/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.store.impl.jooq.generation.tables.daos;


import com.wuda.foundation.store.impl.jooq.generation.tables.StoreUserRelationship;
import com.wuda.foundation.store.impl.jooq.generation.tables.records.StoreUserRelationshipRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * 如果把用户ID字段放在store表中，表明店铺属于某个用户，但是如果有多个用户可以管理这个店铺呢？有种做法是一个用户作为另一个用户的子账号；也可以建立用户与店铺的关联关系，这样感觉更符合逻辑。把用户IID放在store表，可以很明确的表明店铺的owner，如果是用关联关系表的话，就需要明确的标明哪个用户是owner，哪些用户只是管理这个店铺的。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreUserRelationshipDao extends DAOImpl<StoreUserRelationshipRecord, com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship, ULong> {

    /**
     * Create a new StoreUserRelationshipDao without any configuration
     */
    public StoreUserRelationshipDao() {
        super(StoreUserRelationship.STORE_USER_RELATIONSHIP, com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship.class);
    }

    /**
     * Create a new StoreUserRelationshipDao with an attached configuration
     */
    public StoreUserRelationshipDao(Configuration configuration) {
        super(StoreUserRelationship.STORE_USER_RELATIONSHIP, com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship.class, configuration);
    }

    @Override
    public ULong getId(com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchById(ULong... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship fetchOneById(ULong value) {
        return fetchOne(StoreUserRelationship.STORE_USER_RELATIONSHIP.ID, value);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfStoreId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByStoreId(ULong... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.STORE_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByUserId(ULong... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.USER_ID, values);
    }

    /**
     * Fetch records that have <code>is_store_owner BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfIsStoreOwner(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.IS_STORE_OWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_store_owner IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByIsStoreOwner(Boolean... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.IS_STORE_OWNER, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByCreateTime(LocalDateTime... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>create_user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfCreateUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.CREATE_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user_id IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByCreateUserId(ULong... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.CREATE_USER_ID, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchRangeOfIsDeleted(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(StoreUserRelationship.STORE_USER_RELATIONSHIP.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<com.wuda.foundation.store.impl.jooq.generation.tables.pojos.StoreUserRelationship> fetchByIsDeleted(ULong... values) {
        return fetch(StoreUserRelationship.STORE_USER_RELATIONSHIP.IS_DELETED, values);
    }
}
